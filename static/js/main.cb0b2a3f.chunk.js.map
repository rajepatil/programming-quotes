{"version":3,"sources":["components/Header.jsx","components/Quote.jsx","getContrast.js","fatchQuote.js","getData.js","components/Footer.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","console","log","styles","backgroundColor","data","buttoncolor","color","bodycolor","className","style","Quote","borderColor","loading","quote","author","randomColor","i","Math","floor","random","getContrast","color1","color2","accessible","contrast","isAccessible","fatchQuote","a","fetch","method","headers","then","res","json","getData","post","en","Footer","onClick","setData","Home","useState","resData","setResData","override","css","useEffect","size","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb0b2a3f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header(props) {\n  console.log(\"Header\", props);\n\n  const styles = {\n    backgroundColor: props.data.buttoncolor,\n    color: props.data.bodycolor\n  };\n\n  return (\n    <header className=\"header\" style={styles}>\n      <h1 className=\"logo\" style={styles}>\n        programming-quotes\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Quote(props) {\n  console.log(\"Quote\", props);\n  const { data } = props;\n\n  const styles = {\n    color: props.data.buttoncolor,\n    backgroundColor: props.data.bodycolor,\n    borderColor: props.data.buttoncolor\n  };\n\n  console.log(\"quote return\", data.loading);\n\n  return (\n    <div className=\"quote_card\" style={styles}>\n      <p style={styles}>\"{data.quote}\"</p>\n      <div className=\"quote_author\" style={styles}>\n        -{data.author}\n      </div>\n    </div>\n  );\n}\n\nexport default Quote;\n","import contrast from \"get-contrast\";\n\nconst randomColor = () => {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nconst getContrast = () => {\n  let color1 = randomColor();\n  let color2 = randomColor();\n\n  let accessible = contrast.isAccessible(color1, color2);\n\n  while (!accessible) {\n    color2 = randomColor();\n    accessible = contrast.isAccessible(color1, color2);\n  }\n\n  return { color1, color2 };\n};\n\nexport default getContrast;\n","const fatchQuote = async () => {\n  const data = await fetch(\n    \"https://programming-quotes-api.herokuapp.com/quotes/random\",\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => res.json())\n    .then(res => {\n      return res;\n    });\n  return data;\n};\n\nexport default fatchQuote;\n","import getContrast from \"./getContrast\";\nimport fatchQuote from \"./fatchQuote\";\n\nconst getData = async () => {\n  const post = await fatchQuote();\n  const contrast = await getContrast();\n\n  const [bodycolor, buttoncolor] = [contrast.color1, contrast.color2];\n  console.log(post.en);\n\n  const [quote, author] = [post.en, post.author];\n  // const { ratio, score } = contrast;\n\n  return { post, quote, author, bodycolor, buttoncolor, loading: false };\n};\n\nexport default getData;\n","import React from \"react\";\n\nfunction Footer(props) {\n  console.log(\"Footer\", props);\n\n  const styles = {\n    color: props.data.bodycolor,\n    backgroundColor: props.data.buttoncolor\n  };\n  return (\n    <footer style={styles} className=\"footer\">\n      <button style={styles} onClick={() => props.setData()} className=\"btn\">\n        click me for random quote\n      </button>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport { css } from \"@emotion/core\";\n\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\nimport Header from \"./Header\";\nimport Quote from \"./Quote\";\n\nimport getData from \"../getData\";\nimport Footer from \"./Footer\";\n\nfunction Home() {\n  const intialState = {\n    bodycolor: null,\n    buttoncolor: null,\n    quote: null,\n    author: null,\n    loading: true\n  };\n\n  const [resData, setResData] = useState(intialState);\n  const override = css`\n    display: block;\n    margin: 0 auto;\n  `;\n\n  async function setData() {\n    const data = await getData();\n    console.log(\"setData\", data);\n    setResData(data);\n  }\n\n  useEffect(() => {\n    console.log(\"useEffect has been called!\");\n    setData();\n  }, []);\n\n  const styles = {\n    color: resData.buttoncolor,\n    backgroundColor: resData.bodycolor\n  };\n\n  console.log(\"home loading is\", resData.loading);\n\n  return (\n    <>\n      {\n        <div className=\"app flex\" style={styles}>\n          <Header data={resData} />\n          {resData.loading ? (\n            <div className=\"sweet-loading\">\n              <BounceLoader\n                css={override}\n                size={150}\n                loading={resData.loading}\n              />\n            </div>\n          ) : (\n            <Quote data={resData} />\n          )}\n          <Footer data={resData} setData={setData} />\n        </div>\n      }\n    </>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"reset-css\";\n\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nclass App extends React.Component {\n  render() {\n    return <Home />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}