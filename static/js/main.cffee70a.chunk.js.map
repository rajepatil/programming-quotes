{"version":3,"sources":["logo.svg","components/Button.jsx","components/Body.jsx","getContrast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","styles","backgroundColor","color","buttoncolor","bodycolor","className","style","onClick","getColorPair","Body","randomColor","i","Math","floor","random","getContrast","color1","color2","accessible","contrast","isAccessible","ratio","toFixed","score","pair","App","setState","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,qJCc5BC,MAZf,SAAgBC,GACd,IAAMC,EAAS,CACbC,gBAAiBF,EAAMG,MAAMC,YAC7BD,MAAOH,EAAMG,MAAME,WAErB,OACE,yBAAKC,UAAU,MAAMC,MAAON,EAAQO,QAAS,kBAAMR,EAAMS,iBACtDT,EAAMG,MAAMC,cCQJM,MAbf,SAAcV,GACV,IAAMC,EAAS,CACXE,MAAOH,EAAMG,MAAMC,YACnBF,gBAAiBF,EAAMG,MAAME,WAEjC,OACI,yBAAKC,UAAU,OAAOC,MAAON,GACzB,wBAAIK,UAAU,YAAYN,EAAMG,MAAME,WACtC,kBAAC,EAAD,CAAQF,MAAOH,EAAMG,MAAOM,aAAcT,EAAMS,iB,gBCVtDE,EAAc,WAGlB,IAFA,IACIR,EAAQ,IACHS,EAAI,EAAGA,EAAI,EAAGA,IACrBT,GAHY,mBAGKU,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOZ,GAeMa,EAbK,WAIlB,IAHA,IAAIC,EAASN,IACTO,EAASP,IACTQ,EAAaC,IAASC,aAAaJ,EAAQC,IACvCC,GACND,EAASP,IACTQ,EAAaC,IAASC,aAAaJ,EAAQC,GAI7C,MAAO,CAAEI,MAFGF,IAASE,MAAML,EAAQC,GAAQK,QAAQ,GAE5BC,MADXJ,IAASI,MAAMP,EAAQC,GACEO,KAAM,CAACR,EAAQC,KCavCQ,E,YAxBb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KASRS,aAAe,WACb,IAAMW,EAAWJ,IADE,EAGc,CAACI,EAASK,KAAK,GAAIL,EAASK,KAAK,IAA3DpB,EAHY,KAGDD,EAHC,KAIXkB,EAAiBF,EAAjBE,MAAOE,EAAUJ,EAAVI,MAEf,EAAKG,SAAS,CAAEtB,YAAWD,cAAakB,QAAOE,WAd/C,EAAKI,MAAQ,CACXvB,UAAW,QACXD,YAAa,QACbkB,MAAO,GACPE,MAAO,IANQ,E,sEAoBjB,OAAO,kBAAC,EAAD,CAAMrB,MAAO0B,KAAKD,MAAOnB,aAAcoB,KAAKpB,mB,GArBrCqB,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cffee70a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Button(props) {\n  const styles = {\n    backgroundColor: props.color.buttoncolor,\n    color: props.color.bodycolor\n  };\n  return (\n    <div className=\"btn\" style={styles} onClick={() => props.getColorPair()}>\n      {props.color.buttoncolor}\n    </div>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nfunction Body(props) {\n    const styles = {\n        color: props.color.buttoncolor,\n        backgroundColor: props.color.bodycolor\n    };\n    return (\n        <div className=\"body\" style={styles}>\n            <h1 className=\"bodyfont\">{props.color.bodycolor}</h1>\n            <Button color={props.color} getColorPair={props.getColorPair} />\n        </div>\n    );\n}\n\nexport default Body;\n","import contrast from \"get-contrast\";\n\nconst randomColor = () => {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nconst getContrast = () => {\n  let color1 = randomColor();\n  let color2 = randomColor();\n  let accessible = contrast.isAccessible(color1, color2);\n  while (!accessible) {\n    color2 = randomColor();\n    accessible = contrast.isAccessible(color1, color2);\n  }\n  var ratio = contrast.ratio(color1, color2).toFixed(2);\n  var score = contrast.score(color1, color2);\n  return { ratio: ratio, score: score, pair: [color1, color2] };\n};\n\nexport default getContrast;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nimport \"reset-css\";\nimport \"./App.css\";\nimport Body from \"./components/Body\";\nimport getContrast from \"./getContrast\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bodycolor: \"black\",\n      buttoncolor: \"white\",\n      ratio: \"\",\n      score: \"\"\n    };\n  }\n\n  getColorPair = () => {\n    const contrast = getContrast();\n\n    const [bodycolor, buttoncolor] = [contrast.pair[0], contrast.pair[1]];\n    const { ratio, score } = contrast;\n\n    this.setState({ bodycolor, buttoncolor, ratio, score });\n  };\n\n  render() {\n    return <Body color={this.state} getColorPair={this.getColorPair} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}