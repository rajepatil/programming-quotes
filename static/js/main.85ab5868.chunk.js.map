{"version":3,"sources":["components/Button.jsx","components/Home.jsx","getContrast.js","fatchQuote.js","getData.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","styles","backgroundColor","data","buttoncolor","color","bodycolor","className","style","onClick","setData","Home","console","log","post","en","randomColor","i","Math","floor","random","getContrast","color1","color2","accessible","contrast","isAccessible","ratio","toFixed","score","pair","fatchQuote","a","fetch","method","headers","then","res","json","getData","App","setState","state","this","err","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8RAceA,MAZf,SAAgBC,GACd,IAAMC,EAAS,CACbC,gBAAiBF,EAAMG,KAAKC,YAC5BC,MAAOL,EAAMG,KAAKG,WAEpB,OACE,yBAAKC,UAAU,MAAMC,MAAOP,EAAQQ,QAAS,kBAAMT,EAAMU,YACtDV,EAAMG,KAAKC,cCYHO,MAjBf,SAAcX,GACV,IAAMC,EAAS,CACXI,MAAOL,EAAMG,KAAKC,YAClBF,gBAAiBF,EAAMG,KAAKG,WAKhC,OAFAM,QAAQC,IAAI,OAAQb,EAAMG,KAAKW,MAI3B,yBAAKP,UAAU,OAAOC,MAAOP,GACzB,wBAAIM,UAAU,YAAYP,EAAMG,KAAKW,KAAKC,IAC1C,kBAAC,EAAD,CAAQZ,KAAMH,EAAMG,KAAMO,QAASV,EAAMU,Y,gBCd/CM,EAAc,WAGlB,IAFA,IACIX,EAAQ,IACHY,EAAI,EAAGA,EAAI,EAAGA,IACrBZ,GAHY,mBAGKa,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOf,GAiBMgB,EAfK,WAIlB,IAHA,IAAIC,EAASN,IACTO,EAASP,IACTQ,EAAaC,IAASC,aAAaJ,EAAQC,IACvCC,GACND,EAASP,IACTQ,EAAaC,IAASC,aAAaJ,EAAQC,GAI7C,MAAO,CAAEI,MAFGF,IAASE,MAAML,EAAQC,GAAQK,QAAQ,GAEnCC,MADJJ,IAASI,MAAMP,EAAQC,GACZO,KAAM,CAACR,EAAQC,KCHzBQ,EAjBC,uCAAG,4BAAAC,EAAA,sEACEC,MACjB,6DACA,CACEC,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAInBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACJ,OAAOA,KAZM,cACXlC,EADW,yBAcVA,GAdU,2CAAH,qDCeDoC,EAZF,uCAAG,wCAAAP,EAAA,6DAEZpB,QAAQC,IAAI,YAFA,SAGOkB,IAHP,cAGNjB,EAHM,gBAIWO,IAJX,cAINI,EAJM,SAMqB,CAACA,EAASK,KAAK,GAAIL,EAASK,KAAK,IAA3DxB,EANK,KAMMF,EANN,KAOJuB,EAAiBF,EAAjBE,MAAOE,EAAUJ,EAAVI,MACfjB,QAAQC,IAAI,CAACV,KAAK,CAACW,OAAMR,YAAWF,cAAauB,QAAOE,WAR5C,kBASL,CAAEf,OAAMR,YAAWF,cAAauB,QAAOE,UATlC,4CAAH,qDCiCEW,E,YA5Bb,WAAYxC,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRU,QAlBmB,sBAkBT,4BAAAsB,EAAA,sEACWO,IADX,OACFpC,EADE,OAER,EAAKsC,SAAStC,GAFN,2CAhBR,EAAKuC,MAAQ,CACXpC,UAAW,GACXF,YAAa,GACbuB,MAAO,GACPE,MAAO,GACPf,KAAM,IAPS,E,iFAYjBF,QAAQC,IAAI,OACZ,IACE8B,KAAKjC,UACL,MAAOkC,O,+BAST,OAAO,kBAAC,EAAD,CAAMzC,KAAMwC,KAAKD,MAAOhC,QAASiC,KAAKjC,c,GAzB/BmC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.85ab5868.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Button(props) {\n  const styles = {\n    backgroundColor: props.data.buttoncolor,\n    color: props.data.bodycolor\n  };\n  return (\n    <div className=\"btn\" style={styles} onClick={() => props.setData()}>\n      {props.data.buttoncolor}\n    </div>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\n\nimport Button from \"./Button\";\n\nfunction Home(props) {\n    const styles = {\n        color: props.data.buttoncolor,\n        backgroundColor: props.data.bodycolor\n    };\n\n    console.log(\"home\", props.data.post);\n    \n    return (\n\n        <div className=\"body\" style={styles}>\n            <h1 className=\"bodyfont\">{props.data.post.en}</h1>\n            <Button data={props.data} setData={props.setData} />\n        </div>\n    );\n}\n\nexport default Home;\n","import contrast from \"get-contrast\";\n\nconst randomColor = () => {\n  var letters = \"0123456789ABCDEF\";\n  var color = \"#\";\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nconst getContrast = () => {\n  let color1 = randomColor();\n  let color2 = randomColor();\n  let accessible = contrast.isAccessible(color1, color2);\n  while (!accessible) {\n    color2 = randomColor();\n    accessible = contrast.isAccessible(color1, color2);\n  }\n  var ratio = contrast.ratio(color1, color2).toFixed(2);\n  var score = contrast.score(color1, color2);\n  return { ratio, score, pair: [color1, color2] };\n};\n\n\n\nexport default getContrast;\n","const fatchQuote = async () => {\n  const data = await fetch(\n    \"https://programming-quotes-api.herokuapp.com/quotes/random\",\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }\n  )\n    .then(res => res.json())\n    .then(res => {\n      return res;\n    });\n  return data;\n};\n\nexport default fatchQuote;\n","import getContrast from \"./getContrast\";\nimport fatchQuote from \"./fatchQuote\";\n\nconst getData = async() => {\n\n    console.log(\"get data\")\n    const post = await fatchQuote();\n    const contrast = await getContrast();\n\n    const [bodycolor, buttoncolor] = [contrast.pair[0], contrast.pair[1]];\n    const { ratio, score } = contrast;\n    console.log({data:{post, bodycolor, buttoncolor, ratio, score}})\n    return { post, bodycolor, buttoncolor, ratio, score };\n  }\n\nexport default getData;","import React from \"react\";\nimport \"reset-css\";\n\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport getData from \"./getData\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bodycolor: \"\",\n      buttoncolor: \"\",\n      ratio: \"\",\n      score: \"\",\n      post: {}\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"cdm\");\n    try {\n      this.setData();\n    } catch (err) {}\n  }\n\n  setData = async () => {\n    const data = await getData();\n    this.setState(data);\n  };\n\n  render() {\n    return <Home data={this.state} setData={this.setData} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}